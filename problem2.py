# Problem Header :Even Fibonacci numbers

"""
Problem Description:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

# This function checks whether the numbers is Even or Odd
def isNumEven(num):
    if num == 0:
        return True
    
    if num % 2 == 0:
        return True
    
    return False

# This function returns a list of Fibonacci Numbers
def fibonacci(num):
    if num == 0:
        return 0
    
    if num == 1:
        return 1
    
    a = 1
    b = 2
    cnt = 0
    result = []
    result.append(a)
    result.append(b)
    while cnt < (num -2):           #Initial two number have already been considered above
        a = a + b
        b = b + a
        cnt = cnt + 2               #Each Iteration computes the next two Fibs
        result.append(a)
        result.append(b)
    return result

# Implementation of the Euler Problem 2, Fib upper limit can be variable
def eulerProblem2(num):
    if num == 0:
        return 0
    
    if num == 1:
        return 1
    
    a = 1
    b = 2
    total = 0
    
    while b < num:           #Initial two number have already been considered above
        if isNumEven(a) ==  True:
            total = total + a
            
        if isNumEven(b) ==  True:
            total = total + b    
                
        a = a + b
        b = b + a
        
    return total

inp = int(input('Enter the upper bound of Fibonacci Sequence Value :'))
 
print ( 'The sum of even-valued terms for Fibonacci sequence whose values do not exceed %d is : %d' % (inp,eulerProblem2(inp)) )